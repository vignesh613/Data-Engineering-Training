
use foodDeliveryDB

// Customers
db.customers.insertMany([
 { _id: 1, name: "Rahul Sharma", email: "rahul@example.com", city: "Bangalore" },
 { _id: 2, name: "Priya Singh", email: "priya@example.com", city: "Delhi" },
 { _id: 3, name: "Aman Kumar", email: "aman@example.com", city: "Hyderabad" }
])

// Restaurants
db.restaurants.insertMany([
 { _id: 101, name: "Spicy Treats", city: "Bangalore", rating: 4.5 },
 { _id: 102, name: "Delhi Biryani House", city: "Delhi", rating: 4.2 },
 { _id: 103, name: "Hyderabad Grill", city: "Hyderabad", rating: 4.7 }
])

// Menu
db.menu.insertMany([
 { _id: 201, restaurant_id: 101, name: "Paneer Tikka", price: 250 },
 { _id: 202, restaurant_id: 101, name: "Veg Biryani", price: 180 },
 { _id: 203, restaurant_id: 102, name: "Chicken Biryani", price: 300 },
 { _id: 204, restaurant_id: 103, name: "Mutton Biryani", price: 400 },
 { _id: 205, restaurant_id: 103, name: "Butter Naan", price: 50 }
])

// Orders
db.orders.insertMany([
 {
   _id: 301,
   customer_id: 1,
   items: [ { menu_id: 201, qty: 2 }, { menu_id: 202, qty: 1 } ],
   order_date: ISODate("2025-01-05"),
   status: "Delivered"
 },
 {
   _id: 302,
   customer_id: 2,
   items: [ { menu_id: 203, qty: 1 } ],
   order_date: ISODate("2025-01-06"),
   status: "Delivered"
 },
 {
   _id: 303,
   customer_id: 3,
   items: [ { menu_id: 204, qty: 1 }, { menu_id: 205, qty: 3 } ],
   order_date: ISODate("2025-01-07"),
   status: "Pending"
 }
])

//1. Insert new customer in Mumbai

db.customers.insertOne({ _id: 4, name: "Rohit Mehta", email: "rohit@example.com", city: "Mumbai" })
{ "acknowledged" : true, "insertedId" : 4 }

//2. Find all restaurants in Hyderabad

db.restaurants.find({ city: "Hyderabad" })
[
 { "_id": 103, "name": "Hyderabad Grill", "city": "Hyderabad", "rating": 4.7 }
]

//3. Update rating of "Spicy Treats" to 4.8

db.restaurants.updateOne({ name: "Spicy Treats" }, { $set: { rating: 4.8 } })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

//4. Delete menu item "Butter Naan"

db.menu.deleteOne({ name: "Butter Naan" })
{ "acknowledged" : true, "deletedCount" : 1 }

//5. Create a unique index on customers.email

db.customers.createIndex({ email: 1 }, { unique: true })

//6. Create compound index on restaurants.city and rating

db.restaurants.createIndex({ city: 1, rating: -1 })

//7. Verify indexes

db.restaurants.getIndexes()
[
 { "v":2, "key":{"_id":1}, "name":"_id_" },
 { "v":2, "key":{"city":1,"rating":-1}, "name":"city_1_rating_-1" }
]

//8. Query that uses compound index

db.restaurants.find({ city: "Bangalore" }).sort({ rating: -1 })

//9. Query that forces COLLSCAN

db.restaurants.find({ rating: { $gt: 4.0 } })

 AGGREGATIONS & ANALYTICS

// 10. Total orders per customer

db.orders.aggregate([
  { $group: { _id: "$customer_id", totalOrders: { $sum: 1 } } }
]).forEach(printjson);

// 11. Total revenue per restaurant

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "menuDetails" }},
  { $unwind: "$menuDetails" },
  { $group: {
      _id: "$menuDetails.restaurant_id",
      revenue: { $sum: { $multiply: [ "$items.qty", "$menuDetails.price" ] } }
  }}
]).forEach(printjson);

// 12. Top 2 most expensive dishes
print("\n12. Top 2 most expensive dishes");
db.menu.find().sort({ price: -1 }).limit(2).forEach(printjson);

// 13. Average price of dishes per restaurant

db.menu.aggregate([
  { $group: { _id: "$restaurant_id", avgPrice: { $avg: "$price" } } }
]).forEach(printjson);

// 14. Count pending orders per city

db.orders.aggregate([
  { $match: { status: "Pending" } },
  { $lookup: { from: "customers", localField: "customer_id", foreignField: "_id", as: "cust" }},
  { $unwind: "$cust" },
  { $group: { _id: "$cust.city", pendingCount: { $sum: 1 } } }
]).forEach(printjson);

// 15. Highest rated restaurant in each city

db.restaurants.aggregate([
  { $sort: { rating: -1 } },
  { $group: { _id: "$city", topRestaurant: { $first: "$name" }, topRating: { $first: "$rating" } } }
]).forEach(printjson);

// 16. Orders with customer name and city

db.orders.aggregate([
  { $lookup: { from: "customers", localField: "customer_id", foreignField: "_id", as: "cust" }},
  { $unwind: "$cust" },
  { $project: { _id:1, order_date:1, "cust.name":1, "cust.city":1 } }
]).forEach(printjson);

// 17. Orders with restaurant + menu details

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "menu" }},
  { $unwind: "$menu" },
  { $lookup: { from: "restaurants", localField: "menu.restaurant_id", foreignField: "_id", as: "rest" }},
  { $unwind: "$rest" },
  { $project: { "rest.name":1, "menu.name":1, qty:"$items.qty" } }
]).forEach(printjson);

// 18. Dishes each customer ordered with quantity

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $group: { _id: "$customer_id", orders: { $push: { dish: "$dish.name", qty: "$items.qty" } } } }
]).forEach(printjson);

// 19. Customers who ordered from Hyderabad Grill

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $match: { "dish.restaurant_id": 103 } },
  { $lookup: { from: "customers", localField: "customer_id", foreignField: "_id", as: "cust" }},
  { $unwind: "$cust" },
  { $project: { "cust.name":1, "cust.city":1 } }
]).forEach(printjson);

// 20. Detailed bill for order 301

db.orders.aggregate([
  { $match: { _id: 301 } },
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $project: {
      dish: "$dish.name",
      qty: "$items.qty",
      price: "$dish.price",
      total: { $multiply: [ "$items.qty", "$dish.price" ] }
  }}
]).forEach(printjson);

// 21. Customers who spent more than 500

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $group: {
      _id: "$customer_id",
      spent: { $sum: { $multiply: ["$items.qty", "$dish.price"] } }
  }},
  { $match: { spent: { $gt: 500 } } }
]).forEach(printjson);

// 22. Top spending customer in Bangalore

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $lookup: { from: "customers", localField: "customer_id", foreignField: "_id", as: "cust" }},
  { $unwind: "$cust" },
  { $match: { "cust.city": "Bangalore" } },
  { $group: { _id: "$cust.name", total: { $sum: { $multiply: ["$items.qty", "$dish.price"] } } }},
  { $sort: { total: -1 } },
  { $limit: 1 }
]).forEach(printjson);

// 23. Restaurants with revenue > 500

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $group: { _id: "$dish.restaurant_id", revenue: { $sum: { $multiply: ["$items.qty", "$dish.price"] } } }},
  { $match: { revenue: { $gt: 500 } } }
]).forEach(printjson);

// 24. Daily revenue

db.orders.aggregate([
  { $unwind: "$items" },
  { $lookup: { from: "menu", localField: "items.menu_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $group: { _id: "$order_date", dailyRevenue: { $sum: { $multiply: ["$items.qty", "$dish.price"] } } }}
]).forEach(printjson);

// 25. Most popular dish

db.orders.aggregate([
  { $unwind: "$items" },
  { $group: { _id: "$items.menu_id", totalQty: { $sum: "$items.qty" } } },
  { $sort: { totalQty: -1 } },
  { $limit: 1 },
  { $lookup: { from: "menu", localField: "_id", foreignField: "_id", as: "dish" }},
  { $unwind: "$dish" },
  { $project: { dish: "$dish.name", totalQty: 1 } }
]).forEach(printjson);
